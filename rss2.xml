<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Foreverpx</title>
    <link>http://www.foreverpx.cn/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>程序员在囧途</description>
    <pubDate>Fri, 10 Aug 2018 09:15:29 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>安卓webview显示网页字体模糊的问题</title>
      <link>http://www.foreverpx.cn/2018/08/10/%E5%AE%89%E5%8D%93webview%E6%98%BE%E7%A4%BA%E7%BD%91%E9%A1%B5%E5%AD%97%E4%BD%93%E6%A8%A1%E7%B3%8A%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <guid>http://www.foreverpx.cn/2018/08/10/%E5%AE%89%E5%8D%93webview%E6%98%BE%E7%A4%BA%E7%BD%91%E9%A1%B5%E5%AD%97%E4%BD%93%E6%A8%A1%E7%B3%8A%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Fri, 10 Aug 2018 09:14:54 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;先看下如下代码&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;绝对定位区域&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;内容正文区域&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>先看下如下代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'A'</span>&gt;</span>绝对定位区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'B'</span>&gt;</span>内容正文区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#A</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="built_in">rgba</span>(0,0,0,0.10);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码在PC和Mobile的浏览器中文字的显示都是正常的。<br>但是安卓Mobile的webview中，一旦满足以下条件，A元素的字体将会变得模糊。</p><ul><li>A元素为绝对（absolute）或固定定位（fixed）元素</li><li>A元素有设置box-shadow属性，且blur值为偶数</li><li>B元素的内容过多使得浏览器产生了竖向的滚动条</li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>大多数情况下，B元素的内容多少是无法控制的。同时也无法避免的要使用到绝对定位的元素。所以只能采用下列方法解决：</p><p>在安卓webview下将box-shadow的blur值设置为奇数</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2018/08/10/%E5%AE%89%E5%8D%93webview%E6%98%BE%E7%A4%BA%E7%BD%91%E9%A1%B5%E5%AD%97%E4%BD%93%E6%A8%A1%E7%B3%8A%E7%9A%84%E9%97%AE%E9%A2%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>关于重构</title>
      <link>http://www.foreverpx.cn/2018/08/10/%E5%85%B3%E4%BA%8E%E9%87%8D%E6%9E%84/</link>
      <guid>http://www.foreverpx.cn/2018/08/10/%E5%85%B3%E4%BA%8E%E9%87%8D%E6%9E%84/</guid>
      <pubDate>Fri, 10 Aug 2018 05:09:24 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;实现的妥协&quot;&gt;&lt;a href=&quot;#实现的妥协&quot; class=&quot;headerlink&quot; title=&quot;实现的妥协&quot;&gt;&lt;/a&gt;实现的妥协&lt;/h2&gt;&lt;p&gt;记得刚开始工作那会，也正好是项目刚起步不久，我总是觉得公司原有的代码脏乱差，架构混乱，完全不符合我们在书上看到的标准。一直有把项目代码重构一番的念头。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="实现的妥协"><a href="#实现的妥协" class="headerlink" title="实现的妥协"></a>实现的妥协</h2><p>记得刚开始工作那会，也正好是项目刚起步不久，我总是觉得公司原有的代码脏乱差，架构混乱，完全不符合我们在书上看到的标准。一直有把项目代码重构一番的念头。</p> <a id="more"></a><p>工作几年后开始逐渐明白了一个道理，写代码不是造艺术品。代码的本质是功能的实现，在bug可控，能满足用户需求的前提下，其实并不需要那么完美。<br>打造完美的代码是需要成本的，在项目前期，人少活多，一个人顶三个人用，怎么也写不出花样来。这个阶段主要的目标就是尽快实现功能，抢占市场。那在设计和实现上必然会有妥协。</p><h2 id="该不该重构"><a href="#该不该重构" class="headerlink" title="该不该重构"></a>该不该重构</h2><p>当你想重构现有代码的时候，需要问自己三个问题</p><ol><li>重构的目的是什么？<br>为了换新框架增长技能还是对项目真的有益</li><li>现有的架构是否严重的制约了后续功能的开发和性能支撑？<br>如果是，那重构就非常有必要。在项目进行到某一阶段的时候，由于产品的策略调整，会带动功能在原有的基础上有较大改动。如果现有架构无法满足新策略，那么就到了必须要重构的时候。但前提是重构后的代码结构确实要优于现有的，所以重构前要做充分的评审。</li><li>是否有时间，有人力去重构？<br>即使满足上面的第一条件，但是项目上根本就不给足够的时间和人员去做这个事情，那也是无法完成的。从新架构的设计到评审，需要花费很多的时间。在重构的过程中，还得将原有的功能保质的迁移过来，又得花费很多的时间。后面还得加上回归测试的时间等等。这些成本的消耗，老板是否买单呢？<br>重构是一个比较重大的决定，牵扯到项目的方方面面。不是可以由技术人员单方面去决定是否能重构的。当然，如果真的很闲，重构不失为一个充实工作，提升技术的好方式。</li></ol><h2 id="如何实施重构"><a href="#如何实施重构" class="headerlink" title="如何实施重构"></a>如何实施重构</h2><p>决定重构后，如何实施？<br>从我个人的实践经验来看，代码重构需要提前规划和布局，才能优雅的进行。项目技术负责人需要尽量提前预知在未来什么节点下，当前的架构无法满足业务，并提前协调资源开始规划重构。整个过程可以有以下两种模式：</p><ol><li>整体重构，一气呵成。将团队分成AB组，A组继续在当前分支开发，满足业务发版本的需求。B组负责在新分支上在新架构的基础上开发并迁移旧功能。当B组的功能完成并测试通过过，AB组合并，在新架构上开发。</li><li>局部重构，小步前进。在项目的新功能采用新架构，同时兼容旧功能。在产品迭代的过程中按功能模块逐步迁移旧功能。</li></ol><p>上面的方法不一定适用在所有的项目组，具体情况还得具体分析。</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2018/08/10/%E5%85%B3%E4%BA%8E%E9%87%8D%E6%9E%84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>期望值管理</title>
      <link>http://www.foreverpx.cn/2018/08/06/%E6%9C%9F%E6%9C%9B%E5%80%BC%E7%AE%A1%E7%90%86/</link>
      <guid>http://www.foreverpx.cn/2018/08/06/%E6%9C%9F%E6%9C%9B%E5%80%BC%E7%AE%A1%E7%90%86/</guid>
      <pubDate>Mon, 06 Aug 2018 04:11:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;在你的团队中，有没有遇到过这样的情况？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成员A觉得自己已经非常努力，也觉得自己工作的成效还不错，但是绩效评定的结果却让他不那么满意&lt;/li&gt;
&lt;li&gt;&lt;p&gt;评职称或者职级的时候，成员B对评委给出的评定意见不那么认同，觉得评委低估了自己，没有正确的评估自己的能力&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在你的团队中，有没有遇到过这样的情况？</p><ul><li>成员A觉得自己已经非常努力，也觉得自己工作的成效还不错，但是绩效评定的结果却让他不那么满意</li><li><p>评职称或者职级的时候，成员B对评委给出的评定意见不那么认同，觉得评委低估了自己，没有正确的评估自己的能力</p><a id="more"></a></li></ul><p>上面两种情况的频繁发生，A和B就总会认为自己的待遇是不公平的，从而在内心产生挫败感、积怨等一系列负面情绪，进而演化成消极怠工、离职等等，将会对团队成员的稳定性造成极大的影响。</p><p>这个是为什么呢？</p><p>所谓期望越高，失望越大。</p><p>心理学研究，大部分人其实都活在自己的世界中，对自己的标准在心中有一杆秤。但是人们却较少的关心别人对同一件事的标准是什么。这其中就会产生期望值误差。明明自己觉得已经做的很好了，却得不到上司、同事的认可。</p><p>作为管理者，我们应该如何做才能减少此类事情的发生呢？</p><p>要关注员工的期望是什么。管理者应该主动的、坦诚的与成员进行沟通，来了解他们对个人成长、团队氛围、薪酬和激励的期望是怎样的，并将组织对个人这几方面的期望告诉他们，进行良好的沟通。沟通的越清楚，才更能拉近员工期望与组织期望的距离。实际经验表明，差距越小，员工的满意度将会越高。</p><p>举个例子，在奖金分配和薪资调整这类较为敏感的事情公布之前，应该跟员工进行充分沟通。如果某员工对自己的工作成效感觉非常好，而实际的绩效评定却不是如此，这个时候就需跟他沟通他在工作中存在不足的地方，或者是工作成效在组织标准下的差距，来让他意识到自己做的还不够好，还有提升的地方，从而降低他的预期。</p><p>在上面的例子中，如果没有进行有效的期望值管理，员工就会在结果公布的那一刻产生较大的心里落差 ，引发后面一系列的问题。 </p><p>当然，对于做的好并低估自己的员工，我们也应该适当让结果超出他们的预期，从而达到一定的激励效果。</p><p>借用别人说的一段话: <strong>多一些事先沟通，少一些事后突然；多一些雪中送碳、少一些锦上添花；多一些正向引导，少一些漠不关心。</strong></p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2018/08/06/%E6%9C%9F%E6%9C%9B%E5%80%BC%E7%AE%A1%E7%90%86/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Nodejs检测端口占用问题</title>
      <link>http://www.foreverpx.cn/2018/08/04/Nodejs%E6%A3%80%E6%B5%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</link>
      <guid>http://www.foreverpx.cn/2018/08/04/Nodejs%E6%A3%80%E6%B5%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Sat, 04 Aug 2018 04:11:24 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h2&gt;&lt;p&gt;在Windows机器上装了我们的PC端（Electron）应用（TcpServer默认监听20000端口），随后启动应用，发现安卓端登录学生账号后发现无法正常连接pc端（Tcp通信）。&lt;/p&gt;
&lt;h2 id=&quot;系统环境：&quot;&gt;&lt;a href=&quot;#系统环境：&quot; class=&quot;headerlink&quot; title=&quot;系统环境：&quot;&gt;&lt;/a&gt;系统环境：&lt;/h2&gt;&lt;p&gt;Win7 64位&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>在Windows机器上装了我们的PC端（Electron）应用（TcpServer默认监听20000端口），随后启动应用，发现安卓端登录学生账号后发现无法正常连接pc端（Tcp通信）。</p><h2 id="系统环境："><a href="#系统环境：" class="headerlink" title="系统环境："></a>系统环境：</h2><p>Win7 64位</p> <a id="more"></a><h2 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h2><p>对nodejs中net.createServer的listen方法认知不全面，导致20000端口被其他应用程序占用，但同时PC端的端口检查更换机制既没有生效，也没有报错。</p><p>Listen方法可以指定host。如果你不指定，程序会创建 0.0.0.0 和 172.18.96.46 两个ip对于port的监听，此时如果 0.0.0.0:port 端口被其他程序占用，API并不会抛出异常</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>显示在listen端口的时候，指定host</p><p>const server = net.createServer().listen(port, ‘0.0.0.0’);</p><h2 id="过程："><a href="#过程：" class="headerlink" title="过程："></a>过程：</h2><p>通过在PC端的log中我们发现，Android端并没有与PC端的TcpServer创建socket连接，根据经验来看，有以下两种可能</p><p>1.一体机和安卓平板不在一个内网段，无法互相ping通</p><p>2.一体机防火墙未关闭</p><p>经过了互ping和查看防火墙设置，排除了上述两个问题点。</p><p>接下来对tcp请求进行抓包，找到了一些规律</p><p><img src="https://img-blog.csdn.net/20180508205154343?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvcmV2ZXJDamw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>PS： 172.18.96.46为PC端IP      172.18.102.211为Android端IP</p><p>根据图中可以看出，Android端在与PC端建立连接之后，不久之后就断开了。一直重复这个过程。</p><p>在每次断开之前，两个端互发了一条数据，长度为114和135。</p><p><img src="https://img-blog.csdn.net/20180508205229960?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvcmV2ZXJDamw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>第一个请求是Android端向PC端发送，数据内容如下：</p><p><img src="https://img-blog.csdn.net/20180508205250807?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvcmV2ZXJDamw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>数据内容为Android端向PC端发送是哪个学生在请求连接，所以这里没问题，再看下一个请求内容。</p><p><img src="https://img-blog.csdn.net/20180508205311890?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0ZvcmV2ZXJDamw=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>这里发现了问题，这个含有 customError 的消息内容，并不是我们PC端程序发送的。。</p><p>所以可以判断出，20000端口被其他程序使用了，Android的消息发到了其他程序。</p><p>通过 netstat -ano 和 tasklist 命令发现如下信息</p><p>ip:port            pid</p><p>0.0.0.0:20000  5444</p><p>pid            name</p><p>5444         Service.exe</p><p>找到了占用20000端口的进程，是另一个服务，进程名称为Service.exe。</p><p>在原有的程序设计中，我们在创建TcpServer之前，会通过 net.createServer().listen(port)的方法去检查默认端口20000是否被占用。</p><p>如果被占用，程序会抛出错误，我们在捕获错误的时候，会在待选端口列表中选出下一个再进行尝试，以此类推，知道有一个端口可用。</p><p>在之前对这个功能的测试中，我们通过 net.createServer().listen(port) 方法先创建了一个tcpserver后，如果再调用该方法监听同一个端口，发现我们的策略是有效的。</p><p>但是这里却失效了，20000被占用后，tcpserver依然正常创建并监听，但是收不到消息。</p><p>通过查阅Nodejs net.createServer().listen 方法文档，发现listen方法可以指定host。如果你不指定，程序会创建 0.0.0.0 和 172.18.96.46 两个ip对于port的监听，此时如果 0.0.0.0:port 端口被其他程序占用，API并不会抛出异常。</p><p>所以解决方案是在调用listen方法的时候，显示指定host。此时如果端口被其他程序占用，就会抛出异常。</p><p>const server = net.createServer().listen(port, ‘0.0.0.0’);</p><p>server.on(‘error’, function(){</p><pre><code>//try next port</code></pre><p>})</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2018/08/04/Nodejs%E6%A3%80%E6%B5%8B%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E9%97%AE%E9%A2%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>遨游GMTC</title>
      <link>http://www.foreverpx.cn/2018/07/05/gmtc/</link>
      <guid>http://www.foreverpx.cn/2018/07/05/gmtc/</guid>
      <pubDate>Thu, 05 Jul 2018 04:11:24 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;主题&quot;&gt;&lt;a href=&quot;#主题&quot; class=&quot;headerlink&quot; title=&quot;主题&quot;&gt;&lt;/a&gt;主题&lt;/h2&gt;&lt;h3 id=&quot;信用卡研发体系建设与工程化演进&quot;&gt;&lt;a href=&quot;#信用卡研发体系建设与工程化演进&quot; class=&quot;headerlink&quot; title=&quot;信用卡研发体系建设与工程化演进&quot;&gt;&lt;/a&gt;信用卡研发体系建设与工程化演进&lt;/h3&gt;&lt;p&gt;在众多工程化分享中，我觉得来自51信用卡的前端架构组负责人的分享比较清晰、实用和可操作。他讲了他到51信用卡后，建立了一套从开发到发布的整个工程化体系方案。从开发阶段eslint代码规范审查，到代码提交到gitlab仓库后自动触发Jenkins构建前端项目，到上线前使用自动化脚本对production环境配置进行比对检查，最后通过脚本部署代码到服务器。一套流程下来，很大程度上避免了人为因素导致出现的问题。提高了软件整体的可靠性。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="信用卡研发体系建设与工程化演进"><a href="#信用卡研发体系建设与工程化演进" class="headerlink" title="信用卡研发体系建设与工程化演进"></a>信用卡研发体系建设与工程化演进</h3><p>在众多工程化分享中，我觉得来自51信用卡的前端架构组负责人的分享比较清晰、实用和可操作。他讲了他到51信用卡后，建立了一套从开发到发布的整个工程化体系方案。从开发阶段eslint代码规范审查，到代码提交到gitlab仓库后自动触发Jenkins构建前端项目，到上线前使用自动化脚本对production环境配置进行比对检查，最后通过脚本部署代码到服务器。一套流程下来，很大程度上避免了人为因素导致出现的问题。提高了软件整体的可靠性。</p><a id="more"></a><p>他们比较有亮点的是他们在上线前会对production环境配置进行检查，我觉得这个我们可以借鉴。之前也发生过改了production配置而导致的上线失败，通过这种方式应该能一定程度上避免。会后加了讲师微信了解了他们配置比对的技术，还是基于字符串匹配的，这块可能有改进的空间。</p><h3 id="支付宝后工程化时代"><a href="#支付宝后工程化时代" class="headerlink" title="支付宝后工程化时代"></a>支付宝后工程化时代</h3><p>支付宝做了一个可视化的工具用来给后台开发人员快速的开发后台管理系统的前端界面。通过界面退拽和代码插入的方式，使得后台开发人员可以自主开发后台管理系统。据说在他们现在后台系统都是有后台开发工程师自主搭建和开发的，解放了前端开发去写重复的后台管理系统。不过我个人感觉这套系统比较形式化，他只是解决了后台开发不需要写界面样式的问题，但是Javascript逻辑还是要写的。现在很多现成的UI库都能很快的解决样式问题，所以个人感觉这个东西的投入产出比不是很高。</p><p>另外，他们做了一个可视化界面帮助运营人员生成H5宣传页。这个我们可以借鉴一下，这个能极大的减少开发人员介入开发宣传性质H5的成本。只需要运营人员根据自己的配置生成H5就可以了。</p><h3 id="剖析HTML5游戏引擎的渲染原理及动画性能优化"><a href="#剖析HTML5游戏引擎的渲染原理及动画性能优化" class="headerlink" title="剖析HTML5游戏引擎的渲染原理及动画性能优化"></a>剖析HTML5游戏引擎的渲染原理及动画性能优化</h3><p>白鹭引擎的架构师讲了图形学及图形优化相关知识。由于缺乏对图形学基础了解，所以全程没有跟上思路。</p><p>对我们比较有用的一些知识点是，他列出了浏览器实现动画和游戏的各种技术方案以及它们的优劣。</p><p>DOM - 适合做静态内容渲染，适合制作放置类静态游戏（旅行青蛙）<br>Canvas2d - 性能和浏览器兼容都不错<br>WebGL - 性能很强劲，但是API复杂，入门门槛很高</p><p>在白鹭引擎里面，兼容了这三种渲染方式。</p><p>提到“性能糟糕”的含义</p><ul><li>帧频很低</li><li>设备发热</li><li>不定期卡顿</li></ul><p>他们给出的建议是，在任何情况下，保持稳定的帧频会给用户带来好的体验。帧频再高但是不稳定，用户也会觉得体验差。</p><h3 id="V8、JavaScript的现在与未来"><a href="#V8、JavaScript的现在与未来" class="headerlink" title="V8、JavaScript的现在与未来"></a>V8、JavaScript的现在与未来</h3><p>从V8引擎底层的实现来讲解为什么有些代码会是低效的。<br>例举了几个常见的代码写法，分析其性能。对我们平时写代码有一定的指导意义。<br>具体的例子可以看PPT。<br>总体感觉讲的东西还是太少了，浅尝截止。</p><h3 id="WebAssembly在音视频领域的应用"><a href="#WebAssembly在音视频领域的应用" class="headerlink" title="WebAssembly在音视频领域的应用"></a>WebAssembly在音视频领域的应用</h3><p>前半段在介绍WebAssembly的历史和基础，感觉有点浪费时间。后半段介绍了他们如何用WebAssembly去优化他们的应用。</p><p>这家公司主要做在线远程教学的，涉及到老师视频授课的场景。举个例子，在老师远程授课的场景中，程序需要判断老师授课的时候仪态是否端正，会每隔一定时间截获一个视频帧去计算，做面部检测后给出结果。如果这个计算过程放在JavaScript去做的话，可想而知性能不会好到哪里去，所以他们尝试使用WebAssembly去做计算。实际的效果是，使用WebAssembly方案后，视频的流畅度有明显的提高。</p><h3 id="PWA专题"><a href="#PWA专题" class="headerlink" title="PWA专题"></a>PWA专题</h3><p>目前的浏览器市场对PWA的支持已经越来越好了，可以开始规模化的使用PWA技术去提升网页应用的加载性能。</p><p>主要优化点如下：</p><p>使用serviceworker去缓存静态资源， 使得应用在弱网、离线环境下可用。<br>使用骨架屏，在静态资源未加载完之前，显示页面的骨架结构，减少用户的等待预期，提高体验。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>广告还是比较少的，毕竟门票很贵</li><li>干货蛮多的，但是技术细节可能由于时间限制没有讲太多。不过很多讲师留了微信，可以下来讨论</li><li>位置严重不够，很多场是站着听完的</li></ul>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2018/07/05/gmtc/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React 之 setState</title>
      <link>http://www.foreverpx.cn/2017/08/07/React_setState/</link>
      <guid>http://www.foreverpx.cn/2017/08/07/React_setState/</guid>
      <pubDate>Mon, 07 Aug 2017 04:18:16 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;用途&quot;&gt;&lt;a href=&quot;#用途&quot; class=&quot;headerlink&quot; title=&quot;用途&quot;&gt;&lt;/a&gt;用途&lt;/h2&gt;&lt;p&gt;React里面的setState应该是最常用的api了。在React中，视图组件都是基于数据的变化而更新的。那么改变数据就离不开setState。下面看下基本的用法&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;handleClick()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.setState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;render()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;div&amp;gt;&amp;#123;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.state.index&amp;#125;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/div&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;    )&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们通过setState改变了state中index的值，那么引用该值的视图就会被更新。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><p>React里面的setState应该是最常用的api了。在React中，视图组件都是基于数据的变化而更新的。那么改变数据就离不开setState。下面看下基本的用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">constructor</span>()&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        index: <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">handleClick()&#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        index: <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;&#123;<span class="keyword">this</span>.state.index&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>我们通过setState改变了state中index的值，那么引用该值的视图就会被更新。</p><a id="more"></a><h2 id="异步更新"><a href="#异步更新" class="headerlink" title="异步更新"></a>异步更新</h2><p>稍微修改一下上面的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    index: <span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.state.index); <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>我们在调用setState后立刻对index值进行了输出，此时我们会看到打印出来的值是0，并非我们设置的1。Why？</p><p>在官方的描述中，setState操作并不保证是同步的，也可以认为是异步的。</p><p>React在setState之后，会经对state进行diff，判断是否有改变，然后去diff dom决定是否要更新UI。<br>如果这一系列过程立刻发生在每一个setState之后，就可能会有性能问题。比如：你在短时间内频繁setState。<br>React会将state的改变压入栈中，在合适的时机，批量更新state和视图，达到提高性能的效果。</p><h2 id="那么如何知道state已经被更新了呢？"><a href="#那么如何知道state已经被更新了呢？" class="headerlink" title="那么如何知道state已经被更新了呢？"></a>那么如何知道state已经被更新了呢？</h2><p>方法一：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//api setState(updater, [callback])</span></span><br><span class="line"></span><br><span class="line">setState(&#123;</span><br><span class="line">    index: <span class="number">1</span></span><br><span class="line">&#125;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.index);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>方法二：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">componentDidUpdate()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="setState还可以接收function作为参数"><a href="#setState还可以接收function作为参数" class="headerlink" title="setState还可以接收function作为参数"></a>setState还可以接收function作为参数</h2><p>我们看下这样一个场景</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            index: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.add = <span class="keyword">this</span>.add.bind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add()&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            index: <span class="keyword">this</span>.state.index + <span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            index: <span class="keyword">this</span>.state.index + <span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们执行add方法后，得到的结果是state中的index值为1，并不是2。</p><p>原本的设想是每一次setState中，拿到的state都应该是已经改变过的值，但其实并不是。</p><p>这里需要在每一次setState中，拿到上一次改变state后的值，在这个值的基础上，再进行操作。显然，对于setState这种异步的操作使用上面的写法是达不到要求的，所以这里React提供另一种方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//api (prevState, props) =&gt; stateChange</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Com</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            index: <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.add = <span class="keyword">this</span>.add.bind(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add()&#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">index</span>: prevState.index + <span class="number">1</span>&#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">index</span>: prevState.index + <span class="number">1</span>&#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在setState的第一个参数中传入function，该function会被压入调用栈中，在state真正改变后，按顺序回调栈里面的function。该function的第一个参数为上一次更新后的state。这样<br>就能确保你下一次的操作拿到的是你预期的值。</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2017/08/07/React_setState/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Nodejs 异步回调之异常</title>
      <link>http://www.foreverpx.cn/2017/07/03/Nodejs%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E4%B9%8B%E5%BC%82%E5%B8%B8/</link>
      <guid>http://www.foreverpx.cn/2017/07/03/Nodejs%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E4%B9%8B%E5%BC%82%E5%B8%B8/</guid>
      <pubDate>Mon, 03 Jul 2017 02:47:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;目前我们项目的Nodejs异常是通过express next 到 errorhandler 中间件去处理的，&lt;br&gt;原本以为此方法可以捕获到所有的异常，但事实发现并非如此。&lt;/p&gt;
&lt;p&gt;下面以一个异常举例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;req.get(&lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;,&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res, next&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;.b; &lt;span class=&quot;comment&quot;&gt;// 产生了一个exception&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;req.use(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;req, res, next&amp;#125;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next();  &lt;span class=&quot;comment&quot;&gt;//最终到 errorhandler中间件中处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面这个例子中，我们认为的制造了一个excepteion，同时我们期望的结果是异常能进入到我们写好的handler中去做处理。&lt;/p&gt;
&lt;p&gt;从上面代码的运行结果来看，也符合我们的预期。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>目前我们项目的Nodejs异常是通过express next 到 errorhandler 中间件去处理的，<br>原本以为此方法可以捕获到所有的异常，但事实发现并非如此。</p><p>下面以一个异常举例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">req.get(<span class="string">''</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="literal">undefined</span>.b; <span class="comment">// 产生了一个exception</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">req.use(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;req, res, next&#125;&#123;</span><br><span class="line">    next();  <span class="comment">//最终到 errorhandler中间件中处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面这个例子中，我们认为的制造了一个excepteion，同时我们期望的结果是异常能进入到我们写好的handler中去做处理。</p><p>从上面代码的运行结果来看，也符合我们的预期。</p><a id="more"></a><p>如果换个地方抛出异常，结果就不是我们想要的了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">req.get(<span class="string">''</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">    redis.get(<span class="string">'key'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="literal">undefined</span>.b; <span class="comment">// 产生了一个exception</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">req.use(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;req, res, next&#125;&#123;</span><br><span class="line">    next();  <span class="comment">//最终到 errorhandler中间件中处理</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的代码抛出的异常并不会被express捕获，也不会被next到我们的错误处理器中，而是会下面的代码捕获</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">process.on(<span class="string">'uncaughtException'</span>, uncaughtExceptionHandler);</span><br></pre></td></tr></table></figure><p>所以，nodejs中，异步回调中的异常是无法被外围的try catch捕获的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">req.get(<span class="string">''</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        redis.get(<span class="string">'key'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="literal">undefined</span>.b; <span class="comment">// 产生了一个exception</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//并不会进到这里来</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>解决方案：</p><p>1.Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        redis.get(<span class="string">'key'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(<span class="string">"Hello"</span>);</span><br><span class="line">            <span class="comment">// reject();</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">promiseFun().then().catch();</span><br></pre></td></tr></table></figure><p>2.Async await</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getAsync1 = <span class="keyword">await</span> async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        redis.get(<span class="string">'key'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            resolve(<span class="string">"Hello"</span>);</span><br><span class="line">            <span class="comment">// reject();</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getAsync1);</span><br></pre></td></tr></table></figure><p>But …</p><p>如果是下面这样写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promiseFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        redis.get(<span class="string">'key'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>();  <span class="comment">//依然捕获不到</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">promiseFun().then().catch();</span><br></pre></td></tr></table></figure><p>是依然捕获不到的。</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2017/07/03/Nodejs%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E4%B9%8B%E5%BC%82%E5%B8%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Echart在使用webpack打包之后，IE10+中无法渲染的问题</title>
      <link>http://www.foreverpx.cn/2017/03/04/echarts_webpack_ie/</link>
      <guid>http://www.foreverpx.cn/2017/03/04/echarts_webpack_ie/</guid>
      <pubDate>Sat, 04 Mar 2017 14:08:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;今天在IE11上开发时，发现Echart在IE11上无法渲染出来，控制台报错  SCRIPT65535: Invalid calling object&lt;/p&gt;
&lt;p&gt;错误指向的是Echart依赖的Zrender模块的requestAnimationFrame模块，指示requestAnimationFrame方法调用失败&lt;/p&gt;
&lt;p&gt;查阅MSDN关于IE兼容差异的文档，发现有一篇叫做 &lt;a href=&quot;https://msdn.microsoft.com/library/gg622930(v=vs.85&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;函数指针方法调用&lt;/a&gt;.aspx) 的文章&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>今天在IE11上开发时，发现Echart在IE11上无法渲染出来，控制台报错  SCRIPT65535: Invalid calling object</p><p>错误指向的是Echart依赖的Zrender模块的requestAnimationFrame模块，指示requestAnimationFrame方法调用失败</p><p>查阅MSDN关于IE兼容差异的文档，发现有一篇叫做 <a href="https://msdn.microsoft.com/library/gg622930(v=vs.85" target="_blank" rel="noopener">函数指针方法调用</a>.aspx) 的文章</p><a id="more"></a><p>文章大意如下：</p><p><code>早期版本的 Windows Internet Explorer 支持将方法的指针进行缓存并随后使用缓存的指针来调用方法。自 Windows Internet Explorer 9 开始，取消了这项支持以改善与其他浏览器的互操作性。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.writeln;</span><br><span class="line">d(<span class="string">"&lt;script language=VBScript&gt;"</span>); <span class="comment">//error Invalid calling object</span></span><br></pre></td></tr></table></figure><p><code>从 Internet Explorer 9 开始，需要有一个对象才能调用方法。默认情况下，在全局作用域中提供 window 对象（如前面示例中所示）。不过，window 对象没有 writeln 方法，因此报告 JavaScript 错误消息：“调用对象无效”。</code></p><p><code>解决这个报错的方案是显示提供适当的调用对象，或使用 JavaScript 的 bind API 将隐式调用对象与该方法关联。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d.call(<span class="built_in">document</span>, <span class="string">'&lt;script language="VBScript"&gt;'</span>);</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.writeln.bind(<span class="built_in">document</span>);</span><br><span class="line">d(<span class="string">"&lt;script language=VBScript&gt;"</span>); <span class="comment">// Now this is OK.</span></span><br></pre></td></tr></table></figure><p>根据这个原理，我们稍微修改下requestAnimationFrame模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//requestAnimationFrame.js 模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp;</span><br><span class="line">                                (<span class="built_in">window</span>.requestAnimationFrame</span><br><span class="line">                                || <span class="built_in">window</span>.msRequestAnimationFrame</span><br><span class="line">                                || <span class="built_in">window</span>.mozRequestAnimationFrame</span><br><span class="line">                                || <span class="built_in">window</span>.webkitRequestAnimationFrame))</span><br><span class="line">                            || <span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">                                setTimeout(func, <span class="number">16</span>);</span><br><span class="line">                            &#125;;</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//requestAnimationFrame.js 模块</span></span><br><span class="line"><span class="built_in">module</span>.exports = (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp;</span><br><span class="line">                                (<span class="built_in">window</span>.requestAnimationFrame</span><br><span class="line">                                || <span class="built_in">window</span>.msRequestAnimationFrame.bind(<span class="built_in">window</span>)</span><br><span class="line">                                || <span class="built_in">window</span>.mozRequestAnimationFrame</span><br><span class="line">                                || <span class="built_in">window</span>.webkitRequestAnimationFrame))</span><br><span class="line">                            || <span class="function"><span class="keyword">function</span> (<span class="params">func</span>) </span>&#123;</span><br><span class="line">                                setTimeout(func, <span class="number">16</span>);</span><br><span class="line">                            &#125;;</span><br></pre></td></tr></table></figure><p>即可解决。</p><p>不过，解决这个问题还有另一个方法。</p><p>在webpack的配置中，我们在开发环境使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">devtool: <span class="string">'eval-source-map'</span></span><br></pre></td></tr></table></figure><p>来定位错误，去掉eval方式亦可解决此问题，不过原因不详，还有待探究。</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2017/03/04/echarts_webpack_ie/#disqus_thread</comments>
    </item>
    
    <item>
      <title>zepto跨域ajax无法带cookie的问题</title>
      <link>http://www.foreverpx.cn/2017/02/18/zepto%E8%B7%A8%E5%9F%9Fajax%E6%97%A0%E6%B3%95%E5%B8%A6cookie%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <guid>http://www.foreverpx.cn/2017/02/18/zepto%E8%B7%A8%E5%9F%9Fajax%E6%97%A0%E6%B3%95%E5%B8%A6cookie%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <pubDate>Sat, 18 Feb 2017 09:24:02 GMT</pubDate>
      <description>
      
        &lt;p&gt;在A域的代码中，用zepto的ajax方法去向B域请求数据。同时，我们希望把B域的cookie也随请求带过去，代码如下&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    url: &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    type: &lt;span class=&quot;string&quot;&gt;&#39;GET&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    xhrFields: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        withCredentials: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;withCredentials这个参数是为了让XMLHttpRequest发起跨域请求的时候，能带上目标域的cookie。&lt;/p&gt;
&lt;p&gt;这在使用jquery的时候并没有问题，但是使用zepto的时候，发现cookie并没有被带上。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在A域的代码中，用zepto的ajax方法去向B域请求数据。同时，我们希望把B域的cookie也随请求带过去，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">    url: <span class="string">'B'</span>,</span><br><span class="line">    type: <span class="string">'GET'</span>,</span><br><span class="line">    xhrFields: &#123;</span><br><span class="line">        withCredentials: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>withCredentials这个参数是为了让XMLHttpRequest发起跨域请求的时候，能带上目标域的cookie。</p><p>这在使用jquery的时候并没有问题，但是使用zepto的时候，发现cookie并没有被带上。</p><a id="more"></a><p>在官方文档中，关于ajax的部分是这样写的</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">xhrFields (default: none): an object containing properties to be copied over verbatim to the XMLHttpRequest instance. v1.1+</span><br></pre></td></tr></table></figure><p>意思是可以在options里面设置xhrFields的相关属性，比如上面提到的withCredentials。值得注意的是，后面标注了实现版本是1.1+。我们目前使用的是1.1.1，按理说应该是支持的。</p><p>在反复尝试后，cookie依然无法带过去，所以只能通过看源码解决了。确认下是否真的实现了这个属性。</p><p>下面是1.1-stable的版本：</p><p><a href="https://github.com/madrobby/zepto/blob/1.1-stable/src/ajax.js" target="_blank" rel="noopener">zepto-ajax-1.1-stable</a></p><p>在代码中，搜索xhrFields，发现只有如下一处与之相关</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (settings.xhrFields) <span class="keyword">for</span> (name <span class="keyword">in</span> settings.xhrFields) xhr[name] = settings.xhrFields[name]</span><br></pre></td></tr></table></figure><p>此处xhrField是通过setting对象带进来的，而setting对象是在ajaxBeforeSend方法中传入的，所以跟ajax初始化时的options参数并没有关系。</p><p>所以得出的结论是zepto库的ajax模块中，并没有实现与文档相匹配的options的xhrFields属性，如果要达到带cookie的效果，只能通过下面代码解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$.ajaxSettings.beforeSend = <span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// see https://github.com/madrobby/zepto/issues/274</span></span><br><span class="line">    xhr.withCredentials = <span class="literal">true</span>;  <span class="comment">// TODO(elsigh): Do this in zepto w/ xhrFields.</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>顺便查看了一下1.2.0版本ajax模块的代码，也没有实现通过options设置xhrFields的功能。。。</p><p>原文出处：<a href="http://www.foreverpx.cn">http://www.foreverpx.cn</a></p><p>转载请注明出处。</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2017/02/18/zepto%E8%B7%A8%E5%9F%9Fajax%E6%97%A0%E6%B3%95%E5%B8%A6cookie%E7%9A%84%E9%97%AE%E9%A2%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>git关联本地与远程分支</title>
      <link>http://www.foreverpx.cn/2016/10/25/git-upstream/</link>
      <guid>http://www.foreverpx.cn/2016/10/25/git-upstream/</guid>
      <pubDate>Tue, 25 Oct 2016 02:49:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;当我们在本地新建一个叫&lt;strong&gt;devtest&lt;/strong&gt;的分支的时候，我们希望他与git远程上的某个分支进行关联。&lt;/p&gt;
&lt;p&gt;假设远程上的那个分支也叫&lt;strong&gt;devtest&lt;/strong&gt;，如果我们直接去pull代码，会报下面的错&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>当我们在本地新建一个叫<strong>devtest</strong>的分支的时候，我们希望他与git远程上的某个分支进行关联。</p><p>假设远程上的那个分支也叫<strong>devtest</strong>，如果我们直接去pull代码，会报下面的错</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">上午10:54:33 Branch devtest was created (show balloon)</span><br><span class="line">上午10:54:36 Can<span class="string">'t update: no tracked branch</span></span><br><span class="line"><span class="string">           No tracked branch configured for branch devtest.</span></span><br><span class="line"><span class="string">           To make your branch track a remote branch call, for example,</span></span><br><span class="line"><span class="string">           git branch --set-upstream devtest origin/devtest (show balloon)</span></span><br></pre></td></tr></table></figure><p>提示我们需要用 –set-upstream 去关联这两个分支，命令是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream devtest origin/devtest</span><br></pre></td></tr></table></figure><p>当你执行这句命令之后，他又会提示你<strong>–set-upstream</strong>要换成<strong>–set-upstream-to</strong>命令</p><p>–set-upstream-to 在新版本git中已经替代了 –set-upstream， 并且后面跟随的两个参数要对调一下，如下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch --<span class="built_in">set</span>-upstream-to origin/devtest devtest</span><br></pre></td></tr></table></figure><p>远程分支在前，本地分支在后。</p><p>关联之后就可以正常的pull代码了。</p><p>原文出处：<a href="http://www.foreverpx.cn">http://www.foreverpx.cn</a></p><p>转载请注明出处。</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2016/10/25/git-upstream/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTML5_input_file_打开很慢的问题</title>
      <link>http://www.foreverpx.cn/2016/08/31/html5_input_file_bug/</link>
      <guid>http://www.foreverpx.cn/2016/08/31/html5_input_file_bug/</guid>
      <pubDate>Wed, 31 Aug 2016 09:26:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;开发中遇到了这样一个问题&lt;/p&gt;
&lt;p&gt;我们在代码中使用了HTML5的input[file]标签去上传图片&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>开发中遇到了这样一个问题</p><p>我们在代码中使用了HTML5的input[file]标签去上传图片</p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"element"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时，在上面代码中，使用了 accept=”image/*” 去过滤所有非图片的文件。</p><p>但是，在最新版本的chrome（52.0.2743.116 (64-bit)）中，出现了一个很奇特的问题。</p><p>点击input之后，会有一定概率出现文件选择框弹出非常慢的问题，正常情况下，不到1S就能弹出文件选择框。但是慢的时候，可能达到7 ~ 10秒。</p><p>对属性进行逐一排查后，发现是accept=”image/*”的问题。</p><p>将accept=”image/*”改为指定的图片格式就不会出现上述的概率性问题，所以我将上传图片的过滤格式指定为了常用的几种格式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"element"</span> <span class="attr">accept</span>=<span class="string">"image/jpg,image/jpeg,image/png"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，如果希望过滤所有的非图片格式，那么这个问题还是会存在。原因初步猜想是当设置accept=”image/*”时，浏览器会在弹出框中处理所有的非图片元素，包含所有的图片格式，如果文件较多会增加处理时间，而这个时候可能在这个版本的chrome中有bug（也许是底层没实现好），导致概率性时间增长。</p><p>原文出处：<a href="http://www.foreverpx.cn">http://www.foreverpx.cn</a><br>转</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2016/08/31/html5_input_file_bug/#disqus_thread</comments>
    </item>
    
    <item>
      <title>跨域Ajax之ContentType:application/json</title>
      <link>http://www.foreverpx.cn/2016/06/22/cross_content_type/</link>
      <guid>http://www.foreverpx.cn/2016/06/22/cross_content_type/</guid>
      <pubDate>Wed, 22 Jun 2016 09:26:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;在使用Ajax跨域请求时，如果设置Header的ContentType为application/json,会分两次发送请求。第&lt;br&gt;一次先发送Method为OPTIONS的请求到服务器，这个请求会询问服务器支持哪些请求方法（GET,POST等），&lt;br&gt;支持哪些请求头等等服务器的支持情况。等到这个请求返回后，如果原来我们准备发送的请求符合服务器的规&lt;br&gt;则，那么才会继续发送第二个请求，否则会在Console中报错。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在使用Ajax跨域请求时，如果设置Header的ContentType为application/json,会分两次发送请求。第<br>一次先发送Method为OPTIONS的请求到服务器，这个请求会询问服务器支持哪些请求方法（GET,POST等），<br>支持哪些请求头等等服务器的支持情况。等到这个请求返回后，如果原来我们准备发送的请求符合服务器的规<br>则，那么才会继续发送第二个请求，否则会在Console中报错。</p><a id="more"></a><p>为什么在跨域的时候设置ContentType为application/json时会请求两次？其实JQuery的文档对此有做<br>说明。</p><p><strong>contentType (default: ‘application/x-www-form-urlencoded; charset=UTF-8’)</strong></p><p>Type: Boolean or String</p><p>When sending data to the server, use this content type. Default is “application/x-www-form-urlencoded; charset=UTF-8”, which is fine for most cases. If you explicitly pass in a content-type to $.ajax(), then it is always sent to the server (even if no data is sent). As of jQuery 1.6 you can pass false to tell jQuery to not set any content type header. Note: The W3C XMLHttpRequest specification dictates that the charset is always UTF-8; specifying another charset will not force the browser to change the encoding. <strong>Note: For cross-domain requests, setting the content type to anything other than application/x-www-form-urlencoded, multipart/form-data, or text/plain will trigger the browser to send a preflight OPTIONS request to the server.</strong></p><p>注意Note后面的描述，在跨域的时候，除了contentType为application/x-www-form-urlencoded, multipart/form-data或者text/plain外，都会触发浏览器先发送方法为OPTIONS的请求。</p><p>比如说，你原来的请求是方法方法POST，如果第一个请求返回的结果Header中的Allow属性并没有POST方法，<br>那么第二个请求是不会发送的，此时浏览器控制台会报错，告诉你POST方法并不被服务器支持。</p><p>下面看下OPTIONS请求的返回图</p><p><img src="http://o929v8ilh.bkt.clouddn.com/045DA4EC-7C23-494B-B0D7-BC681AA7A37A_meitu_1.jpg" alt=""></p><p>图中箭头指向的Allow就是服务器返回的支持的方法。</p><p>不仅如此，如果想要用ContentType:application/json发送跨域请求，服务器端还必须设置一个名为<br>Access-Control-Allow-Headers 的Header，将它的值设置为 Content-Type，表明服务器能够接收<br>到前端发送的请求中的ContentType属性并使用它的值。否则第二次请求也是发不出去的，浏览器console会<br>报错，并提示你服务器没有设置Access-Control-Allow-Headers。</p><p>原文出处：<a href="http://www.foreverpx.cn">http://www.foreverpx.cn</a><br>转</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2016/06/22/cross_content_type/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Localstorage使用不严谨之坑</title>
      <link>http://www.foreverpx.cn/2016/05/26/hole-in-localstorage/</link>
      <guid>http://www.foreverpx.cn/2016/05/26/hole-in-localstorage/</guid>
      <pubDate>Thu, 26 May 2016 09:26:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;今天上线新版本后，发现极个别“老”用户在微信浏览器中无法打开我们网站的首页。在经过一番线上文件代理替&lt;br&gt;换后，终于发现了问题所在。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>今天上线新版本后，发现极个别“老”用户在微信浏览器中无法打开我们网站的首页。在经过一番线上文件代理替<br>换后，终于发现了问题所在。</p><a id="more"></a><p>问题代码段：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(localstorage.getItem(<span class="string">"things"</span>))&#123;</span><br><span class="line">    <span class="keyword">var</span> things = localstorage.getItem(<span class="string">"things"</span>);</span><br><span class="line"></span><br><span class="line">    use(things);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//缓存用一次就删除</span></span><br><span class="line">    localstorage.removeItem(<span class="string">'things'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    use(newData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码乍一看没什么问题，但是有隐患。在老版本中，localstorage中存的things内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name:<span class="string">'px'</span>,</span><br><span class="line">    age:<span class="string">'25'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是到了新版本，由于需求问题，这个缓存的值改变了，变成了如下结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    username:<span class="string">'px'</span>,</span><br><span class="line">    myage:<span class="string">'25'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就导致了在使用<em>use</em>函数处理<em>things</em>的时候报错了，导致后面的removeItem永远不执行，所以缓存<br>的这段数据在代码中永远不被清除，use函数一直使用旧的数据进行渲染，这样就一直报错，永远无法使用新<br>数据。</p><p>这里有两点需要改进的</p><ul><li>给缓存加版本号</li><li>用变量读取缓存后，立刻清除缓存</li></ul><p>优化后的代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先判断缓存版本号</span></span><br><span class="line"><span class="keyword">if</span>(localstorage.getItem(<span class="string">"version"</span>) == curVersion)&#123;</span><br><span class="line">    <span class="keyword">if</span>(localstorage.getItem(<span class="string">"things"</span>))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> things = localstorage.getItem(<span class="string">"things"</span>);</span><br><span class="line">        <span class="comment">//立刻清除</span></span><br><span class="line">        localstorage.removeItem(<span class="string">'things'</span>);</span><br><span class="line"></span><br><span class="line">        use(things);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        use(newData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    localstorage.removeItem(<span class="string">'things'</span>);</span><br><span class="line">    use(newData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文出处：<a href="http://www.foreverpx.cn">http://www.foreverpx.cn</a><br>转</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2016/05/26/hole-in-localstorage/#disqus_thread</comments>
    </item>
    
    <item>
      <title>让浏览器记住ajax请求并能前进和后退方法（一）</title>
      <link>http://www.foreverpx.cn/2016/05/06/history-hash/</link>
      <guid>http://www.foreverpx.cn/2016/05/06/history-hash/</guid>
      <pubDate>Fri, 06 May 2016 10:38:30 GMT</pubDate>
      <description>
      
        &lt;p&gt;在我们浏览不同网页的时候，我们可以通过浏览器的前进、后退键来去到我们前后访问过的页面。这都有一个共同点，就是浏览器地址栏的地址改变了。浏览器自身维护了一个记录用户访问页面历史的栈，栈中记录了用户访问不同页面的先后顺序。但是在开发中，我们经常会用到ajax技术去提升网页的用户体验。但是ajax本身并不改变浏览器地址栏中的url，是在同一个网页内部操作的，这时，浏览器并不会记录ajax请求的记录。在这种情况下，用户在一个页面触发的5次ajax请求后，点了后退按钮，浏览器不会再次请求之前的ajax请求，而是返回了上一页。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在我们浏览不同网页的时候，我们可以通过浏览器的前进、后退键来去到我们前后访问过的页面。这都有一个共同点，就是浏览器地址栏的地址改变了。浏览器自身维护了一个记录用户访问页面历史的栈，栈中记录了用户访问不同页面的先后顺序。但是在开发中，我们经常会用到ajax技术去提升网页的用户体验。但是ajax本身并不改变浏览器地址栏中的url，是在同一个网页内部操作的，这时，浏览器并不会记录ajax请求的记录。在这种情况下，用户在一个页面触发的5次ajax请求后，点了后退按钮，浏览器不会再次请求之前的ajax请求，而是返回了上一页。</p><a id="more"></a><p>解决这个问题的第一种方法就是利用location的hash值。当url的hash值改变时，页面并不会跳转，但是浏览器此时会将此带hash的url记录到历史记录中。利用这个特性，我们可以人为的模拟带历史记录功能的ajax请求。下面是这种方法的demo。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-id</span>=<span class="string">"1"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-id</span>=<span class="string">"2"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先创建两个按钮，点击按钮时，向服务器发送请求，并将data-id通过参数带到服务器，服务器返回对应data-id的结果。于此同时，改变按钮状态，并将location的hash值改为data-id的值。最后监听location的hash值变化，重复上述步骤。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendAjax</span>(<span class="params">hash</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"recived data:"</span> + hash);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">btnStatus</span>(<span class="params">hash</span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"li"</span>).removeClass(<span class="string">'active'</span>);</span><br><span class="line">    $(<span class="string">"li[data-id="</span>+hash+<span class="string">"]"</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onHashChange</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> curHash = <span class="built_in">window</span>.location.hash.replace(<span class="string">"#"</span>,<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">if</span>(curHash)&#123;</span><br><span class="line">        btnStatus(curHash);</span><br><span class="line">        sendAjax(curHash);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onhashchange = onHashChange;</span><br><span class="line"></span><br><span class="line">$(<span class="string">"li"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = $(<span class="keyword">this</span>).attr(<span class="string">'data-id'</span>);</span><br><span class="line">    <span class="built_in">window</span>.location.hash = id;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当我们点击按“1-2-1”这样的顺序点击按钮时，控制台的输出如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">recived data:1</span><br><span class="line">recived data:2</span><br><span class="line">recived data:2</span><br></pre></td></tr></table></figure><p>此时我们连续按三次返回按钮，控制台输出如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">recived data:1</span><br><span class="line">recived data:2</span><br><span class="line">recived data:1</span><br></pre></td></tr></table></figure><p>可见这样就模拟实现了浏览器记录ajax请求的功能。</p><p>原文出处：<a href="http://www.foreverpx.cn">http://www.foreverpx.cn</a><br>转</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2016/05/06/history-hash/#disqus_thread</comments>
    </item>
    
    <item>
      <title>iScroll在安卓下无法点击的问题</title>
      <link>http://www.foreverpx.cn/2016/02/03/iscroll_android_chrome/</link>
      <guid>http://www.foreverpx.cn/2016/02/03/iscroll_android_chrome/</guid>
      <pubDate>Wed, 03 Feb 2016 02:49:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;iScroll解决安卓下无法点击在网上已经有了解决方案，代码如下：&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>iScroll解决安卓下无法点击在网上已经有了解决方案，代码如下：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">iScrollClick</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/iPhone|iPad|iPod|Macintosh/i</span>.test(navigator.userAgent)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/Chrome/i</span>.test(navigator.userAgent)) <span class="keyword">return</span> (<span class="regexp">/Android/i</span>.test(navigator.userAgent));</span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/Silk/i</span>.test(navigator.userAgent)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/Android/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">   <span class="keyword">var</span> s=navigator.userAgent.substr(navigator.userAgent.indexOf(<span class="string">'Android'</span>)+<span class="number">8</span>,<span class="number">3</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">parseFloat</span>(s[<span class="number">0</span>]+s[<span class="number">3</span>]) &lt; <span class="number">44</span> ? <span class="literal">false</span> : <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myScroll = <span class="keyword">new</span> IScroll(<span class="string">"#ID"</span>, &#123;</span><br><span class="line">click:iScrollClick()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样看上去是没什么问题，但在实际开发中，会有一个坑：在Android4.4+的手机上，是要区分webview和chrome的，<br>按照上面的正则，会导致chrome下使用iscroll后无法点击。</p><p>上面的正则无法判断在Android4.4+的手机上，用户到底是用的是自带的webview还是chrome浏览器。<br>这两个浏览器调用userAgent所显示的信息几乎一样，不用之处只有chrome的版本号。<br>webview使用的版本号会比真正的chrome的版本号小很多。所以只能利用这个版本号来区分这两个浏览器。修改后的代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">iScrollClick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/iPhone|iPad|iPod|Macintosh/i</span>.test(navigator.userAgent))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Silk/i</span>.test(navigator.userAgent))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Android/i</span>.test(navigator.userAgent)) &#123;</span><br><span class="line">        <span class="keyword">var</span> chromeVersion = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Chrome/i</span>.test(navigator.userAgent))&#123;</span><br><span class="line">            chromeVersion = navigator.userAgent.substr(navigator.userAgent.indexOf(<span class="string">'Chrome'</span>)+<span class="number">7</span>,<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> s=navigator.userAgent.substr(navigator.userAgent.indexOf(<span class="string">'Android'</span>)+<span class="number">8</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">parseFloat</span>(s[<span class="number">0</span>]+s[<span class="number">3</span>]) &lt; <span class="number">44</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(chromeVersion &lt; <span class="number">40</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我是认为如果chrome的版本号小于40，就为webview,现在的webview版本号还停留在27。</p><p>原文出处：<a href="http://www.foreverpx.cn">http://www.foreverpx.cn</a><br>转载请注明出处。</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2016/02/03/iscroll_android_chrome/#disqus_thread</comments>
    </item>
    
    <item>
      <title>安卓微信浏览器中location.href失效的问题</title>
      <link>http://www.foreverpx.cn/2016/02/03/android-location/</link>
      <guid>http://www.foreverpx.cn/2016/02/03/android-location/</guid>
      <pubDate>Wed, 03 Feb 2016 02:47:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;在移动web中，经常会使用window.location.href去跳转页面，这个方法在绝大多数浏览器中都不会&lt;br&gt;存在问题，但是在安卓手机的微信自带浏览器中，会出现一个奇怪的bug。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在移动web中，经常会使用window.location.href去跳转页面，这个方法在绝大多数浏览器中都不会<br>存在问题，但是在安卓手机的微信自带浏览器中，会出现一个奇怪的bug。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href = baseUrl + <span class="string">'article/comment'</span>;</span><br></pre></td></tr></table></figure><p>上面的代码是通过href属性赋值去跳转到文章的评论页面，这段代码在安卓手机的微信自带浏览器中会偶发性的失效，<br>调用上面的代码后，浏览器进度条加载完后，页面并没有跳转，还是停留在当前页面。</p><p>暂时还没找到具体的原因，但是当时遇到问题时，感觉是缓存在捣乱，所以尝试着给跳转链接后面加了一个随机数或者<br>时间戳，结果是问题解决了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href = baseUrl + <span class="string">'article/comment?v='</span>+(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime());</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.location.href = baseUrl + <span class="string">'article/comment?v='</span>+<span class="built_in">Math</span>.random();</span><br></pre></td></tr></table></figure><p>原文出处：<a href="http://www.foreverpx.cn">http://www.foreverpx.cn</a><br>转载请注明出处。</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2016/02/03/android-location/#disqus_thread</comments>
    </item>
    
    <item>
      <title>localStorage在无痕模式下被禁用的问题</title>
      <link>http://www.foreverpx.cn/2016/02/02/localstorage-disabled/</link>
      <guid>http://www.foreverpx.cn/2016/02/02/localstorage-disabled/</guid>
      <pubDate>Tue, 02 Feb 2016 03:41:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;在移动web开发中，经常会使用到localStorage去缓存一些数据，一般情况下，我们只需要按照下面的代码去使用就不会有&lt;br&gt;问题。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在移动web开发中，经常会使用到localStorage去缓存一些数据，一般情况下，我们只需要按照下面的代码去使用就不会有<br>问题。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.localStorage)&#123;</span><br><span class="line">    localStorage.setItem(<span class="string">'key'</span>,<span class="string">'value'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但只是这样判断是不够的，现在的一些浏览器有一种功能叫<em>无痕浏览</em>，顾名思义，就是用户在浏览网页的过程中什么都不缓存，<br>什么也不记录，不留下痕迹。</p><p>自然地，localStorage也被禁用了。但此时window.localStorage并不是null，它还是原来的localStorage对象，只不过<br>这个对象的方法被禁用了。如果单纯只按上面的方法判断，js会抛出异常。</p><p>所以得用下面的代码去判断这个localStorage是否可用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storageTest = <span class="function"><span class="keyword">function</span>(<span class="params">storage</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!!storage)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            storage.setItem(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br><span class="line">            storage.removeItem(<span class="string">"key"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">storageTest(<span class="built_in">window</span>.localStorage);</span><br><span class="line">storageTest(<span class="built_in">window</span>.sessionStorage);</span><br></pre></td></tr></table></figure><p>原文出处：<a href="http://www.foreverpx.cn">http://www.foreverpx.cn</a><br>转载请注明出处。</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2016/02/02/localstorage-disabled/#disqus_thread</comments>
    </item>
    
    <item>
      <title>移动web开发之——iso中的video</title>
      <link>http://www.foreverpx.cn/2015/12/05/mobile-video-ios/</link>
      <guid>http://www.foreverpx.cn/2015/12/05/mobile-video-ios/</guid>
      <pubDate>Sat, 05 Dec 2015 03:41:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;移动web开发中，我们常常会用到video标签去播放多媒体视频。但不同于pc端浏览器中使用video标签，很多属性和方法在ios中的safari是被限制的，同时也新增了一些特性，下面一一道来。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>移动web开发中，我们常常会用到video标签去播放多媒体视频。但不同于pc端浏览器中使用video标签，很多属性和方法在ios中的safari是被限制的，同时也新增了一些特性，下面一一道来。</p><a id="more"></a><p>##对于小屏幕的优化<br>在iphone这样的小屏幕中，当用户点击播放按钮时，总是以全屏的方式去播放视频，此时video会适配横屏和竖屏模式。由于总是以全屏播放，你会发现设置control属性之后，在video标签加载完毕后是看不到控制栏的，只有video的一张post在页面中，点击post全屏播放视频后，control才会出现。我觉得这样设定是为了能让用户具有更好的观看体验，屏幕本来就小，在如此小的屏幕下还不全屏看就太难受了。但这个设定只是针对ios中的safari，而不针对MacOs中的safari。  </p><p>##移动网络下的用户操作<br>用户使用手机的时候很有可能是在移动2-4G的网络情况下，所以在ios的Safari中，video是不允许预加载和自动播放的。只有当用户手动触发开始事件之后，诸如<code>play()</code>、<code>stop()</code>这样的方法才能起作用，例如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Play"</span> <span class="attr">onclick</span>=<span class="string">"document.myMovie.play()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"document.myMovie.play()"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>像上面这段代码，在ios的safari中就不起作用。只有当用户亲自触发开始时，才能用play()函数去控制video。这样设定的目的是为了防止用户产生过高的流量费用，因为用户打开网页时，可能并没有打算去观看视频。PS: audio标签也是同样的规则。</p><p>##ios中video的默认高度和宽度<br>ios中，当没有指定高和宽时，video的默认高度和宽度为150*300，当video开始播放后，高和宽是不能改变的了。</p><p>##支持的格式</p><ul><li><p>desktop: Safari中，media能支持的视频格式取决于系统中安装的QuickTime。</p></li><li><p>iphone: Safari中，media支持无损的WAV、AIF、MP3、HE-ACC、MPEG-4、H264。</p></li></ul><p>##一个页面上有多个video或audio实例<br>现在ios中不支持一个页面同时播放两个（包含两个）以上的video或audio。</p><p>##音量控制</p><ul><li><p>desktop:Safari可以通过volume属性去设置media的音量，但是这个音量的范围是跟系统相关的。当设置的值为1时，音量为当前用户设置的系统音量。当设置为0时，音量为静音。其他的音量的0~1之间。</p></li><li><p>iphone: 在ios中，音量只受用户通过物理按键去控制，通过javascript去设置volume属性是无效的。读取volume属性会永远返回1。</p></li></ul><p>##播放速率</p><ul><li><p>desktop: 可以设置0~1的值给playbackRate属性去改变播放速率。</p></li><li><p>iphone: 不支持playbackRate属性。</p></li></ul><p>更多关于safari中的媒体标签的细节请参考苹果的官网文档：<br><a href="https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW1" target="_blank" rel="noopener">https://developer.apple.com/library/safari/documentation/AudioVideo/Conceptual/Using_HTML5_Audio_Video/Device-SpecificConsiderations/Device-SpecificConsiderations.html#//apple_ref/doc/uid/TP40009523-CH5-SW1</a></p><p>原文出处：<a href="http://www.foreverpx.cn">http://www.foreverpx.cn</a><br>转载请注明出处。</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2015/12/05/mobile-video-ios/#disqus_thread</comments>
    </item>
    
    <item>
      <title>移动web开发之——viewport</title>
      <link>http://www.foreverpx.cn/2015/11/21/mobile-viewport/</link>
      <guid>http://www.foreverpx.cn/2015/11/21/mobile-viewport/</guid>
      <pubDate>Sat, 21 Nov 2015 03:41:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;在绝大多数移动端的web页面中，head标签里面都会有这样一行代码&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;width=device-width, initial-scale=1, maximum-scale=1,user-scalable=0&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而PC端的页面中却不怎么出现。那么这个&lt;code&gt;viewport&lt;/code&gt;的作用是什么呢？&lt;/p&gt;
&lt;p&gt;&lt;code&gt;viewport&lt;/code&gt;根据字面翻译，为视窗，窗口。&lt;code&gt;viewport&lt;/code&gt;的宽度决定了&lt;code&gt;html&lt;/code&gt;这个标签的宽度。&lt;code&gt;viewport&lt;/code&gt;又分为&lt;code&gt;visual viewport&lt;/code&gt;(可视窗口）和&lt;code&gt;layout viewport&lt;/code&gt;（布局窗口）。&lt;/p&gt;
&lt;p&gt;可以想象如下一种场景，你做在电影院的某一排看电影，荧幕的大小肯定是固定的，此时荧幕的大小就相当于&lt;code&gt;layout viewport&lt;/code&gt;。你的眼睛的视野范围就可以理解为&lt;code&gt;visual viewport&lt;/code&gt;，这个范围取决于你离屏幕的距离，离荧幕越近，你看到的屏幕范围就越小，就看不全，离的越远，你看到的屏幕就更加全。&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在绝大多数移动端的web页面中，head标签里面都会有这样一行代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1,user-scalable=0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然而PC端的页面中却不怎么出现。那么这个<code>viewport</code>的作用是什么呢？</p><p><code>viewport</code>根据字面翻译，为视窗，窗口。<code>viewport</code>的宽度决定了<code>html</code>这个标签的宽度。<code>viewport</code>又分为<code>visual viewport</code>(可视窗口）和<code>layout viewport</code>（布局窗口）。</p><p>可以想象如下一种场景，你做在电影院的某一排看电影，荧幕的大小肯定是固定的，此时荧幕的大小就相当于<code>layout viewport</code>。你的眼睛的视野范围就可以理解为<code>visual viewport</code>，这个范围取决于你离屏幕的距离，离荧幕越近，你看到的屏幕范围就越小，就看不全，离的越远，你看到的屏幕就更加全。</p><a id="more"></a><p>在PC端时，由于屏幕尺寸一般都比较大，所以浏览器默认viewport为clientWidth，也即是<code>visual viewport</code>=<code>layout viewport</code>=<code>clientWidth</code>。所以当你的html宽度小于clientWidth时，你能看到全部的内容，就如同屏幕刚好占满你的视野。</p><p>但是在移动端，比如手机，屏幕的尺寸一般很小，如果默认使得两个viewport值相等的话，那么几乎所有的pc页面都会乱的不成样子。所以手机浏览器中，<code>visual viewport</code>默认为手机屏幕的大小，而<code>layout viewport</code>默认为800px到1000px不等，不同浏览器的初始值不一样。当你用手机打开一个pc端的网页时，按照上面的规则，你只能看到其中的一部分，剩下的部分需要滚动屏幕才能看到。但是许多设备的浏览器为了让用户能看全页面，而选择了最小缩放，也就相当于你离荧屏更远以保证你能看到全部的屏幕。但是在电影院中，毕竟最远距离是有限的，所以这个缩放也是有范围的。当达到最小缩放的时候，如果元素的宽度（px）依然很宽（荧屏是在太大了，最后一排也看不全），那么就会出现横向滚动条（你只能摇脑袋了）。</p><p>width为100%的时候：</p><p><img src="http://i12.tietuku.com/d0b481b297a3734b.jpg" alt="1"></p><p>width为2000px的时候：</p><p><img src="http://i12.tietuku.com/271bd7bb7cfa542e.jpg" alt="2"></p><p>在移动端开发中，一般是不允许出现横向滚动条的，与app相同，而且得保证诸如按钮这样的元素能显示出合适的大小来让用户去触摸。所以得避免<code>layout viewport</code>太宽以及避免浏览器的缩放。这个时候我们就得用到文章开头的那句代码。</p><p><code>width=device-width</code>表示我们将<code>layout viewport</code>的宽度设为跟设备一样宽，以IPHONE6为例，IPHONE6的横向分辨率为750，转换之后所代表的css宽度为375px，这个时候<code>layout viewport</code>的宽度就为375px，也即是html的宽度为375px。一般设计稿也是以375或者750来出图，这样就可以很方便的在设备上实现页面了。</p><p>假设在设计稿中有一个宽200px，高70px的按钮，效果如下：</p><p><img src="http://i5.tietuku.com/60f24d52c870f5c8.jpg" alt="3"></p><p>如果不设置viewport，则是这个样子的：</p><p><img src="http://i5.tietuku.com/87f3db358774c8b4.jpg" alt="4"></p><p><code>initial-scale=1, maximum-scale=1</code>是将最大和最小缩放都设置为1，也即是不缩放，并且使用<code>user-scalable=0</code>禁用了用户通过双指缩放。</p><p>原文出处：<a href="http://www.foreverpx.cn">http://www.foreverpx.cn</a><br>转载请注明出处。</p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2015/11/21/mobile-viewport/#disqus_thread</comments>
    </item>
    
    <item>
      <title>IE8下元素背景为透明时，hover事件失效的bug</title>
      <link>http://www.foreverpx.cn/2015/11/10/ie8-hover-transparent/</link>
      <guid>http://www.foreverpx.cn/2015/11/10/ie8-hover-transparent/</guid>
      <pubDate>Tue, 10 Nov 2015 09:39:10 GMT</pubDate>
      <description>
      
        &lt;p&gt;在IE8下，当一个div设置了背景为透明或者不设置任何背景时，在该div上注册的hover事件是不会触发的。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;outer&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&#39;inner&#39;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        此处有文字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.outer&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.outer&lt;/span&gt;&lt;span class=&quot;selector-pseudo&quot;&gt;:hover&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;#000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>在IE8下，当一个div设置了背景为透明或者不设置任何背景时，在该div上注册的hover事件是不会触发的。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'outer'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'inner'</span>&gt;</span></span><br><span class="line">        此处有文字</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.outer</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>上面这段代码中，给outer加上了hover的伪类，正常情况下，鼠标移到outer的100*100的区域中，就会触发hover，并使得内部的文字的颜色<br>变成黑色。但是在IE8下面，鼠标在除文字以往的区域都不回触发hover，只有在鼠标位于文字上时，才会触发。</p><p>针对于这个bug，有如下解决方案：</p><p>1.给outer设置真实的背景图片，不过是一张1*1的透明png。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'1.png'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.给outer设置一个不存在的图片，不过会产生404请求。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">'.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更多的参考资料可看如下链接：</p><p><a href="http://blog.rednael.com/2009/09/01/TrappingMouseEventsOnTransparentInputElementsOrTextareasInIE.aspx" target="_blank" rel="noopener">http://blog.rednael.com/2009/09/01/TrappingMouseEventsOnTransparentInputElementsOrTextareasInIE.aspx</a></p>]]></content:encoded>
      
      <comments>http://www.foreverpx.cn/2015/11/10/ie8-hover-transparent/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
